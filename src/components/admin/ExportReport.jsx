import React, { useEffect, useState } from 'react';
import axios from 'axios';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import jsPDF from 'jspdf';           // Import jsPDF
import 'jspdf-autotable';           // Importing autoTable as a side effect
import './ExportReport.css';

const ExportReport = ({ user, filters = [] }) => {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');

    useEffect(() => {
        const fetchProducts = async () => {
            try {
                const res = await axios.get('https://wrighto-sustainables-backend.onrender.com/api/product');
                setProducts(res.data || []);
            } catch (err) {
                setError('Failed to fetch products for export.');
            } finally {
                setLoading(false);
            }
        };
        fetchProducts();
    }, []);

    const generateExcelReport = () => {
        const now = new Date().toLocaleString();

        const headerInfo = {
            Title: 'Product Export Report',
            'Date of Export': now,
            'Generated By': user?.name || 'System',
            'Filters Applied': filters.length ? filters.join(', ') : 'None',
            'Export Format': 'Excel',
        };

        const totalProducts = products.length;
        const totalValue = products.reduce((sum, p) => sum + ((p.pricePerPiece || 0) * (p.quantityInStock || 0)), 0);
        const categories = {};
        products.forEach(p => {
            categories[p.category] = (categories[p.category] || 0) + 1;
        });

        const summaryInfo = {
            'Total Products Exported': totalProducts,
            'Total Value': `â‚¹${totalValue.toFixed(2)}`,
            'Categories': Object.entries(categories).map(([cat, count]) => `${cat}: ${count}`).join(', '),
        };

        const stockCounts = {
            InStock: 0,
            LowStock: 0,
            OutOfStock: 0,
        };
        products.forEach(p => {
            const qty = p.quantityInStock || 0;
            if (qty === 0) stockCounts.OutOfStock++;
            else if (qty < 10) stockCounts.LowStock++;
            else stockCounts.InStock++;
        });

        const prices = products.map(p => p.pricePerPiece || 0);
        const priceSummary = {
            'Lowest Price': `â‚¹${Math.min(...prices).toFixed(2)}`,
            'Highest Price': `â‚¹${Math.max(...prices).toFixed(2)}`,
            'Average Price': `â‚¹${(prices.reduce((a, b) => a + b, 0) / prices.length).toFixed(2)}`,
        };

        const productDetails = products.map(p => ({
            'Product Name': p.name,
            'Product ID': p._id,
            'Stock Status': (p.quantityInStock === 0 ? 'Out of Stock' : (p.quantityInStock < 10 ? 'Low Stock' : 'In Stock')),
            'Price': `â‚¹${p.pricePerPiece}`,
            'Quantity in Stock': p.quantityInStock,
            'Description': p.description,
            'Image Link': p.images?.[0] || '',
            'Dimensions': p.productDimensions ? `${p.productDimensions.length}x${p.productDimensions.width}x${p.productDimensions.height}` : '',
            'Material': p.materialTypeFree?.join(', ') || '',
            'Features': p.features?.join(', ') || '',
            'Microwaveable': p.isMicrowaveable ? 'Yes' : 'No',
            'Dishwasher Safe': p.isDishwasherSafe ? 'Yes' : 'No',
            'Pack Size': p.packSize,
            'Min Order Qty': p.minOrderQty,
        }));

        const worksheetData = [
            headerInfo,
            {},
            summaryInfo,
            {},
            stockCounts,
            {},
            priceSummary,
            {},
            ...productDetails,
        ];

        const ws = XLSX.utils.json_to_sheet(worksheetData, { skipHeader: false });
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, 'Product Report');
        const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });

        saveAs(new Blob([wbout], { type: 'application/octet-stream' }), `Product_Report_${Date.now()}.xlsx`);
        toast.success('Excel exported successfully!');
    };

    const generatePDFReport = () => {
        const doc = new jsPDF();
        const now = new Date().toLocaleString();

        doc.setFontSize(16);
        doc.text('Product Export Report', 14, 20);
        doc.setFontSize(10);
        doc.text(`Date of Export: ${now}`, 14, 28);
        doc.text(`Generated By: ${user?.name || 'System'}`, 14, 34);
        doc.text(`Filters Applied: ${filters.length ? filters.join(', ') : 'None'}`, 14, 40);

        // Table Headers
        let startY = 50;
        doc.setFontSize(11);
        doc.text('Product Name', 14, startY);
        doc.text('Price', 74, startY);
        doc.text('Stock Qty', 104, startY);
        doc.text('Microwaveable', 134, startY);
        doc.text('Dishwasher Safe', 164, startY);

        startY += 6;
        doc.setFontSize(9);

        // Table Body
        products.forEach((p, i) => {
            if (startY > 280) { // Create new page if nearing bottom
                doc.addPage();
                startY = 20;
            }

            doc.text(p.name?.slice(0, 30), 14, startY);
            doc.text(`â‚¹${p.pricePerPiece}`, 74, startY);
            doc.text(`${p.quantityInStock}`, 104, startY);
            doc.text(p.isMicrowaveable ? 'Yes' : 'No', 134, startY);
            doc.text(p.isDishwasherSafe ? 'Yes' : 'No', 164, startY);
            startY += 6;
        });

        doc.save(`Product_Report_${Date.now()}.pdf`);
    };


    if (loading) return <div className="export-container">Loading products...</div>;
    if (error) return <div className="export-container">{error}</div>;

    return (
        <div className="export-container">
            <h2 className="report-heading">ðŸ“¦ Product Report</h2>
            <br />
            <br />
            <p className="report-subtext">
                Download detailed reports of your product inventory in Excel or PDF format.
            </p>
            <br />
            <p style={{ marginBottom: '1rem', color: '#555' }}>
                Exporting your data helps you maintain accurate offline records, analyze trends,
                and share product summaries with stakeholders. Choose the preferred format below
                and generate your up-to-date inventory report instantly.
            </p>
            <p style={{ marginBottom: '2rem', fontStyle: 'italic', color: '#666' }}>
                Tip: Ensure your product list is updated before exporting to avoid discrepancies
                in quantity or value calculations.
            </p>

            <div className="export-buttons">
                <button className="export-btn" onClick={generateExcelReport}>Export Excel</button>
                <button className="export-btn pdf-btn" onClick={generatePDFReport}>Export PDF</button>
            </div>

            <div className="summary-cards">
                <div className="summary-card">
                    <h3>Total Products</h3>
                    <p>{products.length}</p>
                </div>
                <div className="summary-card">
                    <h3>Total Value</h3>
                    <p>â‚¹{products.reduce((sum, p) => sum + ((p.pricePerPiece || 0) * (p.quantityInStock || 0)), 0).toFixed(2)}</p>
                </div>
                <div className="summary-card">
                    <h3>Low Stock</h3>
                    <p>{products.filter(p => p.quantityInStock > 0 && p.quantityInStock < 10).length}</p>
                </div>
                <div className="summary-card">
                    <h3>Out of Stock</h3>
                    <p>{products.filter(p => p.quantityInStock === 0).length}</p>
                </div>
            </div>

            <p style={{ marginTop: '1rem', color: '#444' }}>
                Need more advanced analytics? Stay tuned for our upcoming Inventory Insights module.
            </p>

            <ToastContainer />
        </div>
    );
};

export default ExportReport;
